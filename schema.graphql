# type User{
#   id: ID!
#   username: String!
#   password: String!
#   sessions: [Session!]!
#   #sources: [Source!]!
# }

# type Session {
#   id: ID!
#   key: String!
#   user: User!
# }

type Digest {
    id: ID!
    #owner: User!
    source: Source!
}

type Source {
    id: ID!
    name: String!
    description: String!
    tags: [String!]!
    #url: String!
    #entries: [Entry!]!
}

type Entry {
	id: ID!
	publishedAt: String!
	title: String!
	excerpt: String
	url: String
}

type Daily {
	date:    String
	digests: [DailyDigest!]!
}

type DailyDigest {
	digest:  Digest
	entries: Entry
}

# type Entry {
#   id: ID! @unique
#   timePublished: DateTime!
#   weight: Int
#   title: String!
#   content: String
#   url: String
#   source: Source!
#   sourceKey: String
# }

# Queries

type Query {
    sources(): [Source!]!
    digests(): [Digest!]!
    daily(date: String): Daily!
    #users(input: UsersInput): [User!]!
}

# Mutations

#input UsersInput {
#    search: String
#}

type Mutation {
    newDigest(input: NewDigestInput): Digest!
    #signIn(username: String!): Session
    #register(username: String!, password: String!): Session
    #addSource(sessionKey: String!, type: SourceType!, settings: String, maxEntries: Int!): Source
}

input NewDigestInput {
    sourceId: String
}
